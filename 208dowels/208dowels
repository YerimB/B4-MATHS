#!/usr/bin/python3
##
## EPITECH PROJECT, 2020
## MATH
## File description:
## 208dowels
##

import math
import sys

samples = [] ; Tx = [] ; tmpTx = [] ; Khi = float(0)
merged = [] ; mergedIdx = [str(i) for i in range(9)] ; mergeNb = []
p = float(0)

# merged tab corresponding to 'Ox'

table = [[0.00, 0.02, 0.06, 0.15, 0.27, 0.45, 0.71, 1.07, 1.64, 2.71, 3.84, 5.41, 6.63],
[0.02, 0.21, 0.45, 0.71, 1.02, 1.39, 1.83, 2.41, 3.22, 4.61, 5.99, 7.82, 9.21],
[0.11, 0.58, 1.01, 1.42, 1.87, 2.37, 2.95, 3.66, 4.64, 6.25, 7.81, 9.84, 11.34],
[0.30, 1.06, 1.65, 2.19, 2.75, 3.36, 4.04, 4.88, 5.99, 7.78, 9.49, 11.67, 13.28],
[0.55, 1.61, 2.34, 3.00, 3.66, 4.35, 5.13, 6.06, 7.29, 9.24, 11.07, 13.39, 15.09],
[0.87, 2.20, 3.07, 3.83, 4.57, 5.35, 6.21, 7.23, 8.56, 10.64, 12.59, 15.03, 16.81],
[1.24, 2.83, 3.82, 4.67, 5.49, 6.35, 7.28, 8.38, 9.80, 12.02, 14.07, 16.62, 18.48],
[1.65, 3.49, 4.59, 5.53, 6.42, 7.34, 8.35, 9.52, 11.03, 13.36, 15.51, 18.17, 20.09],
[2.09, 4.17, 5.38, 6.39, 7.36, 8.34, 9.41, 10.66, 12.24, 14.68, 16.92, 19.68, 21.67],
[2.56, 4.87, 6.18, 7.27, 8.30, 9.34, 10.47, 11.78, 13.44, 15.99, 18.31, 21.16, 23.21]]
khiPercents = [99, 90, 80, 70, 60, 50, 40, 30, 20, 10, 5, 2, 1]

# Khi-squared table & percents

def coefBinomial(n, k):
    return (math.factorial(n) // (math.factorial(k) * math.factorial(n - k)))


def binomial(n, k):
    global p

    return (coefBinomial(n, k) * pow(p, k) * pow(1.0 - p, n - k))


def getProbability(obs):
    global p

    for i in range(0, len(obs)):
        p += float(i * obs[i])
    p /= 10000


def computeBinomial():
    global tmpTx

    for k in range(0, 51): # n = 100
        tmpTx.append(binomial(100, k))


def mergeIndexes(first, second):
    global merged, mergedIdx
    l = [] ; mIdxs = []
    
    for i in range(len(merged)):
        if (i == first):
            mIdxs.append(
                str(int(mergedIdx[first][0]))
                + "-" + str(int(mergedIdx[second][-1]))
            )
            l.append(merged[first] + merged[second])
        elif (i != second):
            mIdxs.append(mergedIdx[i])
            l.append(merged[i])
    merged = l ; mergedIdx = mIdxs


def mergeSamples():
    global merged

    minimum = min(merged)
    if (minimum >= 10):
        return merged
    minIdx = merged.index(minimum)
    if (minIdx == 0):
        minPair = 1
    elif (minIdx == len(merged) - 1):
        minIdx = len(merged) - 2
        minPair = len(merged) - 1
    else:
        minPair = (minIdx - 1) if (merged[minIdx - 1] < merged[minIdx + 1]) else (minIdx + 1)
    if (minIdx > minPair):
        tmp = minPair ; minPair = minIdx ; minIdx = tmp
    mergeIndexes(minIdx, minPair)
    mergeSamples()


def dowels():
    global merged

    # Init, merge, count... to get data easier to manipulate later
    getProbability(merged)
    mergeSamples()
    for tmp in mergedIdx:
        if (len(tmp) == 1): mergeNb.append(1) ; continue
        mergeNb.append(int(tmp[-1]) - int(tmp[0]) + 1)
    mergedIdx[-1] = mergedIdx[-1][0] + "+"

    # Compute theoretical values
    computeBinomial() # using binomial...
    j = 0
    for i in range(len(mergeNb) - 1): # getting Tx before len(mergeNb), which is a special case
        someT = float(0)
        for n in range(mergeNb[i]):
            someT += tmpTx[j] * 100 ; j += 1
        Tx.append(someT)
    someT = float(0)
    for i in range(j, len(tmpTx) - 1):
        someT += tmpTx[i] * 100
    Tx.append(someT)

    # Compute Khi-squared
    Khi = sum([((merged[n] - Tx[n]) ** 2) / Tx[n] for n in range(len(mergeNb))])

    # Get fit validity
    degOfFreedom = len(mergeNb) - 2
    fit = [-1, -1]
    column = 0
    if (Khi > table[degOfFreedom - 1][0] and Khi < table[degOfFreedom - 1][-1]):
        while (Khi < table[degOfFreedom - 1][column] or Khi > table[degOfFreedom - 1][column + 1]):
            column += 1
        fit = [khiPercents[column + 1], khiPercents[column]]
    elif (Khi < table[degOfFreedom - 1][0]):
        fit[0] = khiPercents[0]
    else:
        fit[1] = khiPercents[-1]

    # Display
    print("   x\t| " + "\t| ".join(mergedIdx) + "\t| Total")
    print("  Ox\t| " + "\t| ".join([str(i) for i in merged]) + "\t| " + str(sum(merged)))
    print("  Tx\t| " + "\t| ".join(["%.1f" % i for i in Tx]) + "\t| " + str(round(sum(Tx))))
    print("Distribution:\t\tB(100, %.4f)" % p)
    print("Chi-squared:\t\t%.3f" % Khi)
    print("Degrees of freedom:\t%d" % degOfFreedom)
    print("Fit validity:\t\t", end='')
    if ((-1) not in fit):
        print("%d%% < P < %d%%" % (fit[0], fit[1]))
    else:
        print("P%s" % ((" < %d%%" % fit[1]) if (fit[1] != (-1)) else (" > %d%%" % fit[0])))


try:
    if (len(sys.argv) != 10): raise Exception
    merged = [int(i) for i in sys.argv[1:]]
    for n in merged:
        if (n < 0): raise Exception
    dowels()
except:
    print("Program could not be executed correctly.")
    exit(84)